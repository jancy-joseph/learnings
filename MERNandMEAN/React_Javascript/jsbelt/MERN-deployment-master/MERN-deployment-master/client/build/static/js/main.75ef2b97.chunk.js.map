{"version":3,"sources":["components/Header.jsx","views/Dashboard.jsx","views/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","style","marginTop","marginBottom","Dashboard","useState","setAllProjects","backLogged","setBackLogged","inProgress","setInProgress","completed","setCompleted","flag","setFlag","useEffect","axios","get","then","response","console","log","p","data","Projects","notStarted","working","finished","project","status","push","catch","error","updateStatus","e","target","name","put","value","deleteProject","delete","generateDateString","date","dDate","datetimeString","output","slice","split","formatDate","today","Date","dd","String","getDate","padStart","getMonth","getFullYear","compareDates","color","borderTop","borderLeft","backgroundColor","borderRight","height","overflow","map","i","key","border","padding","margin","title","dueDate","onClick","_id","navigate","Form","setTitle","setDueDate","errors","setErrors","to","err","index","fontSize","onSubmit","preventDefault","post","errorResponse","errorArr","Object","keys","message","onChange","type","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75ef2b97.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Header = props => {\n    return(\n        <div className=\"row\" style={{marginTop: \"20px\", marginBottom: \"20px\"}}>\n            <div className=\"col-12 text-center\">\n                <h1>Project Manager</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React, { useState, useEffect } from \"react\"\nimport { navigate } from \"@reach/router\"\nimport axios from \"axios\"\n\nconst Dashboard = props => {\n\n\n    const [allProjects, setAllProjects] = useState([])\n\n    const [backLogged, setBackLogged] = useState([])\n    const [inProgress, setInProgress] = useState([])\n    const [completed, setCompleted] = useState([])\n\n    const [flag, setFlag] = useState(false)\n\n\n    useEffect( ()=> {\n        axios.get(\"http://localhost:8000/api/projects\")\n            .then(response => {\n                console.log(\"Successfully got all projects from database\")\n                let p = response.data.Projects\n                setAllProjects(p)\n                let notStarted = []\n                let working = []\n                let finished = []\n                for (var project of p){\n                    if (project.status === \"inProgress\"){\n                        working.push(project)\n                    }\n                    else if (project.status === \"completed\"){\n                        finished.push(project)\n                    }\n                    else {notStarted.push(project)}\n                }\n                setBackLogged(notStarted)\n                setInProgress(working)\n                setCompleted(finished)\n\n            })\n            .catch(error => console.log(\"There was an error: \", error))\n    }, [flag])\n\n\n    const clickHandler = e => navigate(\"/projects/new\")\n\n    const updateStatus = e => {\n        if (e.target.name === \"notStarted\"){\n            axios.put(`http://localhost:8000/api/project/${e.target.value}`, {\n                status: \"inProgress\"\n            })\n                .then(response => {\n                    console.log(\"Successfully updated project status!\")\n                    if (flag){setFlag(false)}\n                    else{setFlag(true)}\n                })\n                .catch(error => console.log(\"There was a problem: \", error))\n        }\n        else if (e.target.name === \"inProgress\"){\n            axios.put(`http://localhost:8000/api/project/${e.target.value}`, {\n                status: \"completed\"\n            })\n            .then(response => {\n                console.log(\"Successfully updated project status!\")\n                if (flag){setFlag(false)}\n                else{setFlag(true)}\n            })\n            .catch(error => console.log(\"There was a problem: \", error))\n        }\n    }\n\n    const deleteProject = e => {\n        axios.delete(`http://localhost:8000/api/projects/${e.target.value}`)\n            .then(response => {\n                console.log(\"Project deleted.\")\n                if (flag){setFlag(false)}\n                else{setFlag(true)}\n            })\n            .catch(error => console.log(\"There was an error: \", error))\n    }\n\n    const formatDate = datetimeString => {\n        let date = datetimeString.slice(0,10)\n        let output = date.split(\"-\")\n        return `${output[1]}/${output[2]}/${output[0]}`\n    }\n\n    // Handle Dates\n    const compareDates = date => {\n        let today = new Date()\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n        let d = mm + '/' + dd + '/' + yyyy;\n        return date >= d\n    }\n\n    const generateDateString = date => {\n        let dDate = formatDate(date)\n        if (compareDates(dDate)){\n            return(\n                <p>Due: {dDate}</p>\n            )\n        }\n        else {\n            return(\n                <p style={{color: \"red\"}}>Due: {dDate}</p>\n\n            )\n        }\n    }\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-4 text-center\" style={{borderTop: \"2px solid black\", borderLeft: \"2px solid black\", backgroundColor: \"#9fc5f8\"}}>\n                    <h3>Backlog</h3>\n                </div>\n                <div className=\"col-4 text-center\" style={{borderTop: \"2px solid black\", borderLeft: \"2px solid black\", backgroundColor: \"#fee599\"}}>\n                    <h3>In Progress</h3>\n                </div>\n                <div className=\"col-4 text-center\" style={{borderTop: \"2px solid black\", borderLeft: \"2px solid black\", borderRight: \"2px solid black\", backgroundColor: \"#b6d8a8\"}}>\n                    <h3>Compeleted</h3>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-4\" style={{height: \"600px\", overflow: \"auto\", borderTop: \"2px solid black\", borderLeft: \"2px solid black\"}}>\n                    {\n                        backLogged.map( (project, i) => \n                            <div key={ i } style={{border: \"1px solid grey\", padding: \"10px\", margin: \"10px auto\"}}>\n                                <h4>{project.title}</h4>\n                                {generateDateString(project.dueDate)}\n                                <button onClick={updateStatus} className=\"btn btn-block btn-warning\" value={project._id} name=\"notStarted\">Start Project</button>\n                            </div>\n                        )\n                    }\n                </div>\n                <div className=\"col-4\" style={{height: \"600px\", overflow: \"auto\", borderTop: \"2px solid black\", borderLeft: \"2px solid black\"}}>\n                    {\n                        inProgress.map( (project, i) => \n                            <div key={ i } style={{border: \"1px solid grey\", padding: \"10px\", margin: \"10px auto\"}}>\n                                <h4>{project.title}</h4>\n                                {generateDateString(project.dueDate)}\n                                <button onClick={updateStatus} className=\"btn btn-block btn-success\" value={project._id} name=\"inProgress\">Move to Completed</button>\n                            </div>\n                        )\n                    }\n                </div>\n                <div className=\"col-4\" style={{height: \"600px\", overflow: \"auto\", borderTop: \"2px solid black\", borderLeft: \"2px solid black\", borderRight: \"2px solid black\"}}>\n                    {\n                        completed.map( (project, i) => \n                            <div key={ i } style={{border: \"1px solid grey\", padding: \"10px\", margin: \"10px auto\"}}>\n                                <h4>{project.title}</h4>\n                                {generateDateString(project.dueDate)}\n                                <button onClick={deleteProject} className=\"btn btn-block btn-danger\" value={project._id} name=\"completed\">Remove Project</button>\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col-12\" style={{border: \"2px solid black\", height: \"70px\",}}>\n                    <button onClick={ clickHandler } className=\"btn btn-primary btn-md\" style={{marginTop: \"12px\"}}>Add New Project</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard","import React, { useState } from \"react\"\nimport { Link, navigate } from \"@reach/router\"\nimport axios from \"axios\"\n\nconst Form = props => {\n\n    const [title, setTitle] = useState(\"\")\n    const [dueDate, setDueDate] = useState(\"\")\n    const [errors, setErrors] = useState([])\n\n    const submitHandler = e => {\n        e.preventDefault()\n        axios.post(\"http://localhost:8000/api/project\", {\n            title: title,\n            dueDate: dueDate,\n            status: \"notStarted\",\n        })\n            .then(response => {\n                console.log(\"Successfully created a new project.\")\n                navigate(\"/\")\n            })\n            .catch(err =>{\n                const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n                const errorArr = []; // Define a temp error array to push the messages in\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n                    errorArr.push(errorResponse[key].message)\n                }\n                // Set Errors\n                setErrors(errorArr);\n            })\n    }\n\n\n    // FRONT END VALIDATIONS:\n    // const submitHandler = e => {\n    //     e.preventDefault()\n    //     console.log(frontEndValidations())\n    //     if (frontEndValidations()){\n    //         console.log(\"Running create...\")\n    //         axios.post(\"http://localhost:8000/api/project\", {\n    //             title: title,\n    //             dueDate: dueDate,\n    //             status: \"notStarted\",\n    //         })\n    //             .then(response => {\n    //                 console.log(\"Successfully created a new project.\")\n    //                 navigate(\"/\")\n    //             })\n    //             .catch(err =>{\n    //                 const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n    //                 const errorArr = []; // Define a temp error array to push the messages in\n    //                 for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n    //                     errorArr.push(errorResponse[key].message)\n    //                 }\n    //                 // Set Errors\n    //                 setErrors(errorArr);\n    //             })\n    //     }\n    //     else {\n    //         setErrors(frontEndValidations())\n    //     }\n\n    // }\n\n    // const frontEndValidations = () => {\n    //     let titleError = \"\"\n    //     if (title === \"\"){titleError = \"Project1 is required\"}\n    //     else if (title.length < 3){titleError = \"Project1 must be 3 characters or longer\"}\n    //     let dueDateError = \"\"\n    //     if (dueDate === \"\"){dueDateError = \"Due date1 is required\"}\n    //     let output = []\n    //     if (titleError){output.push(titleError)}\n    //     if (dueDateError){output.push(dueDateError)}\n    //     if (output.length === 0){\n    //         return true\n    //     }\n    //     return output\n    // }\n\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-8 offset-2 text-right\">\n                    <Link to=\"/\">Back to Dashboard</Link>\n                </div>\n            </div>\n            <div className=\"row\" style={{marginTop: \"15px\", marginBottom: \"20px\"}}>\n                <div className=\"col-8 offset-2\">\n                    <h3>Plan a new project \n                        {\n                            errors.map((err, index) => <small key={index} style={{color:\"red\", fontSize:\"16px\"}}>&nbsp;&nbsp;{err}.</small>)\n                        }\n                    </h3>\n                </div>\n            </div>\n\n                <form onSubmit={ submitHandler}>\n                    <div className=\"form-group row\">\n                        <label className=\"col-form-label col-2 offset-2\">Project</label>\n                        <div className=\"form-group col-6\">\n                            <input onChange={e=>setTitle(e.target.value)} className=\"form-control\" type=\"text\"/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-form-label col-2 offset-2\">Due Date</label>\n                        <div className=\"form-group col-6\">\n                            <input onChange={e=>setDueDate(e.target.value)} className=\"form-control\" type=\"date\"/>\n                        </div>\n                    </div>\n                        <div className=\"col-6 offset-3 row\" style={{marginTop: \"50px\"}}>\n                            <button className=\"btn btn-primary btn-block\">Plan Project</button>\n                        </div>\n                </form>\n\n        </div>\n    )\n}\n\nexport default Form","import React, { useState } from 'react';\nimport \"./bootstrap.css\"\nimport { Router } from \"@reach/router\"\n\nimport Header from \"./components/Header\"\nimport Dashboard from \"./views/Dashboard\"\nimport Form from \"./views/Form\"\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n        <Header />\n        <Router>\n          <Dashboard path=\"/\"/>\n          <Form path=\"/projects/new\" />\n        </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}